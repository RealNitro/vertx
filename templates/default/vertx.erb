#!/bin/bash

##############################################################################
##
##  vertx start up script for UN*X
##
##############################################################################

LOG_DIR="<%= node[:vertx][:log_dir] %>"
VERTX_USER="vertx"

<% if node[:platform_family] == "rhel" -%>

if [ -f /etc/sysconfig/vertx ]; then
  . /etc/sysconfig/vertx
fi

<% elsif node[:platform] == "debian" -%>

if [ -f /etc/default/vertx ]; then
  . /etc/default/vertx
fi

<% end -%>

status() {
   pid=0
   procrunning
   if [ $pid -eq 0 ]; then
      echo "Vert.x is not running"
      RETVAL=1
   else
      echo "Vert.x is running with pid $pid"
      RETVAL=0
   fi  
   return $RETVAL
}

#############################################################################
############ Function to lookup process id of given Vertx instance ##########
#############################################################################
function procrunning() {
   procid=0

   procid=$(ps awwx | grep "org.vertx.java.platform.impl.cli.Starter" | grep -v grep | awk '{print $1}')
   
   if [[ $procid ]]; then
    pid=$procid
   fi
}

##########################################################################################
############ Function to rotate vertx.log /console.log file on server start #############
## We use name in the following format:
## vertx.restart.Year-Month-Date.Hours-Mins-Secs.txt
## console.restart.Year-Month-Date.Hours-Mins-Secs.txt
## Date Format to use for log file name: date '+%F.%k-%M-%S'
##########################################################################################

function rotate_log() {
   local DT_FMT=`/bin/date +%F.%H-%M-%S`
   local FILE_NAME="vertx.restart.${DT_FMT}.txt"
   local CONSOLE_FILE_NAME="console.restart.${DT_FMT}.txt"
   
   ## First ever start of the server might not have an existing vertx.log
   ## If file exists, copy it over and then truncate it.
   if [ -f ${LOG_DIR}/vertx.log ]; then
       cp ${LOG_DIR}/vertx.log ${LOG_DIR}/${FILE_NAME}
       ## Fix permissions of newly created files.
       [ ! -z "$SUBIT" ] && chown $VERTX_USER. ${LOG_DIR}/${FILE_NAME}
       chmod 644 ${LOG_DIR}/${FILE_NAME}
       ## truncate the File
       echo "" > ${LOG_DIR}/vertx.log
       ## Fix the permissions on the orignal vertx.log file as well. Just in case !
       chmod 644 ${LOG_DIR}/vertx.log
   fi
   if [ -f ${LOG_DIR}/console.log ]; then
       cp ${LOG_DIR}/console.log ${LOG_DIR}/${CONSOLE_FILE_NAME}
       ## Fix permissions of newly created files.
       [ ! -z "$SUBIT" ] && chown $VERTX_USER. ${LOG_DIR}/${CONSOLE_FILE_NAME}
       chmod 644 ${LOG_DIR}/${CONSOLE_FILE_NAME}
       ## truncate the File
       echo "" > ${LOG_DIR}/console.log
       ## Fix the permissions on the orignal console.log file as well. Just in case !
       chmod 644 ${LOG_DIR}/console.log
   fi
}

# Add default JVM options here. You can also use JAVA_OPTS and VERTX_OPTS to pass JVM options to this script.

# If you're deploying and undeploying a lot of verticles with dynamic languages it's recommended to enable GC'ing
# of generated classes and prevent OOM due to a lot of gc
# JVM_OPTS="-XX:+CMSClassUnloadingEnabled -XX:-UseGCOverheadLimit"
JVM_OPTS=""

# JMX_OPTS=""
# To enable JMX uncomment the following
JMX_OPTS="-Dcom.sun.management.jmxremote -Dvertx.management.jmx=true -Dhazelcast.jmx=true"

APP_NAME="vertx"
APP_BASE_NAME=`basename "$0"`

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD="maximum"

warn ( ) {
    echo "$*"
}

die ( ) {
    echo
    echo "$*"
    echo
    exit 1
}

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
case "`uname`" in
  CYGWIN* )
    cygwin=true
    ;;
  Darwin* )
    darwin=true
    ;;
  MINGW* )
    msys=true
    ;;
esac

# For Cygwin, ensure paths are in UNIX format before anything is touched.
if $cygwin ; then
    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
fi

# Attempt to set VERTX_HOME
# Resolve links: $0 may be a link
PRG="$0"
# Need this for relative symlinks.
while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
        PRG="$link"
    else
        PRG=`dirname "$PRG"`"/$link"
    fi
done
SAVED="`pwd`"
cd "`dirname \"$PRG\"`/.."
VERTX_HOME="`pwd -P`"
cd "$SAVED"

CLASSPATH=${CLASSPATH}:${VERTX_HOME}/conf:${VERTX_HOME}/lib/*:<%= node[:vertx][:home] %>/deploy/packages/*

# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD="$JAVA_HOME/jre/sh/java"
    else
        JAVACMD="$JAVA_HOME/bin/java"
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD="java"
    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
fi

# Increase the maximum file descriptors if we can.
if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
    MAX_FD_LIMIT=`ulimit -H -n`
    if [ $? -eq 0 ] ; then
        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
            MAX_FD="$MAX_FD_LIMIT"
        fi
        ulimit -n $MAX_FD
        if [ $? -ne 0 ] ; then
            warn "Could not set maximum file descriptor limit: $MAX_FD"
        fi
    else
        warn "Could not query businessSystem maximum file descriptor limit: $MAX_FD_LIMIT"
    fi
fi

# For Darwin, add options to specify how the application appears in the dock
if $darwin; then
    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$VERTX_HOME/media/vertx.icns\""
fi

# For Cygwin, switch paths to Windows format before running java
if $cygwin ; then
    VERTX_HOME=`cygpath --path --mixed "$VERTX_HOME"`
    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`

    # We build the pattern for arguments to be converted via cygpath
    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
    SEP=""
    for dir in $ROOTDIRSRAW ; do
        ROOTDIRS="$ROOTDIRS$SEP$dir"
        SEP="|"
    done
    OURCYGPATTERN="(^($ROOTDIRS))"
    # Add a user-defined pattern to the cygpath arguments
    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
    fi
    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    i=0
    for arg in "$@" ; do
        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option

        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
        else
            eval `echo args$i`="\"$arg\""
        fi
        i=$((i+1))
    done
    case $i in
        (0) set -- ;;
        (1) set -- "$args0" ;;
        (2) set -- "$args0" "$args1" ;;
        (3) set -- "$args0" "$args1" "$args2" ;;
        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
    esac
fi

if [ "x" != "x$VERTX_MODS" ]; then
  VERTX_OPTS="$VERTX_OPTS -Dvertx.mods=$VERTX_MODS"
fi

# Split up the JVM_OPTS And VERTX_OPTS values into an array, following the shell quoting and substitution rules
function splitJvmOpts() {
    JVM_OPTS=("$@")
}
eval splitJvmOpts $JVM_OPTS $JAVA_OPTS $JMX_OPTS $VERTX_OPTS

rotate_log

status
check=$?
       
# If already running then do not attempt to start it twice. Also set the
# value of exit code i.e. RETVAL to 0
if [ $check -eq 1 ]; then

  exec "$JAVACMD" \
    "${JVM_OPTS[@]}" \
    -Dvertx.home=$VERTX_HOME\
    -classpath "$CLASSPATH" \
    org.vertx.java.platform.impl.cli.Starter "$@"
fi
